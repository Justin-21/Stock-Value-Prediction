# -*- coding: utf-8 -*-
"""Stock Value Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LyC6noBPJHCywxPjDKjcE9X-4SzGq5Zk
"""

# Commented out IPython magic to ensure Python compatibility.
# import Essential Modules for Prediction 
import pandas as pd
import numpy as np
from sklearn import metrics
# %matplotlib inline
import matplotlib.pyplot as plt

#Import Models from skLearn 
from sklearn.linear_model import LinearRegression
from sklearn.metrics import confusion_matrix, accuracy_score

#uploading the dataset 
Dataset_stock = pd.read_csv('/content/TSLA.csv')

Dataset_stock.head()

# Formating the data time using pandas because in the dataset all the data entry is not formated
Dataset_stock['Date'] = pd.to_datetime(Dataset_stock.Date)

"""Cleaning the Data set using Pandas"""

Dataset_stock.drop('Adj Close' , axis = 1, inplace= True)

Dataset_stock.head()

#checking is there is any null Value or not
Dataset_stock.isnull().sum()

Dataset_stock.describe()

Dataset_stock['Open'].plot(figsize = (16,6))

"""Creating the linear regression Model :"""

x = Dataset_stock[['Open','High','Low','Volume']]
y = Dataset_stock['Close']

"""Spliting the data into traning and testing dataset using Sklearn"""

from sklearn.model_selection import train_test_split
X_Train, X_Test , Y_Train , Y_Test = train_test_split(x,y, random_state = 0)

X_Train.shape

X_Test.shape

regressor = LinearRegression()

"""Calculate the Intercept, Coefficient value"""

regressor.fit(X_Train, Y_Train)

"""Printing the coefficient value ,Intercept value """

print(regressor.coef_)

print(regressor.intercept_)

"""Now we have to predict the data """

Predicted = regressor.predict(X_Test)

print(X_Test)

"""Creating the another dataframe of checking the actual value and predicted value """

Dframe = pd.DataFrame(Y_Test, Predicted)

"""Creating the another dataframe using Dframe for Working together on the actual value and predicted value """

ActualDF = pd.DataFrame({'Actual Price':Y_Test, 'Predicted Price':Predicted})

ActualDF.head()

"""Checking the Model Accuracy"""

regressor.score(X_Test, Y_Test)

"""Creating the Graph for the Model Accuracy"""

graph = ActualDF.head(20)

graph.plot(kind= 'bar')

